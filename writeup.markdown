I've been dabbling with OCaml for the last several years and so when I saw a recent Meetup notice about an F# machine learning code dojo being led by [Mathias Brandewinder](https://github.com/mathias-brandewinder) within walking distance of my house I thought I'd check it out. I'm one of those Linux guys who tends to eschew IDEs, prefers to use vim, and considers .NET to be some very foreign territory. 
But I was curious as I had been hearing rumors on twitter that F# programs were running on Mono faster than the equivalent OCaml versions and I was also taking Andrew Ng's Coursera Machine Learning course so the timing seemed good. So I loaded up mono, monodevelop and F#. As it turns out none of it worked on the day of the dojo, so I looked on with someone with a Windows laptop and Visual Studio.

The code dojo itself was a great way of learning F#. Check out Mathias' [Digits Recognizer code Dojo code and instructions](https://github.com/c4fsharp/Dojo-Digits-Recognizer) which in turn was based on [a Kaggle Machine Learning challenge](http://www.kaggle.com/c/digit-recognizer). 
The task was to implement a KNN (K Nearest Neighbor; in this case K=1) algorithm for recognizing handwritten digits from a dataset that was provided: A training set of 5000 labeled examples and a validation set of 500 labeled examples. Each digit example is a set of 28X28 grayscale pixels (784 gray scale values). 
We wrote a classifier that reads in the training set and then compares each of the 500 validation samples against those 5000 training exmples and returns the label associated with the closest match (the vector with the shortest distance fro a training example). KNN is one of the simplest machine learning algorithms. Even so, we were able to get a 94.4% accuracy rate.

After the Dojo, I spent some time getting Monodevelop and F# running on my Ubuntu 12.04 laptop. Turns out I needed to get Monodevelop 4.0 (built from source) and F# 3.0 (initially tried F# 3.1, but Monodevelop 4.0 wasn't happy with that version). Then I set about reimplementing the algorithm in F# and after I got that working I reimplemented the same algorithm in OCaml. 

